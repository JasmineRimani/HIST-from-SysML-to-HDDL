(define (domain transport_mission) 
	 (:requirements :typing :hierachie :hierarchy :negative-preconditions) 
	 (:types  
		location - object 
		capacity_number - object 
		locatable - object 
		vehicle - locatable 
		package - locatable ) 

	 (:predicates 
		 (at ?arg0 - vehicle ?arg1 - location) 
		 (road ?arg0 - location ?arg1 - location) 
		 (at ?arg1 - location) 
		 (in ?arg0 - package ?arg1 - vehicle) 
		 (capacity_predecessor ?arg0 - capacity_number ?arg1 - capacity_number) 
		 (capacity ?arg0 - vehicle ?arg1 - capacity_number) 
		 (at ?arg0 - package ?arg1 - location) 
	) 

	 (:task Deliver 
		 :parameters (?location-location ?package-package) 
		 :precondition ()
		 :effect ()
	 ) 

	 (:task GetTo 
		 :parameters (?vehicle-vehicle ?l2-location) 
		 :precondition ()
		 :effect ()
	 ) 

	 (:task Load 
		 :parameters (?pack-package ?vehicle-vehicle ?l1-location) 
		 :precondition ()
		 :effect ()
	 ) 

	 (:task Unload 
		 :parameters (?pack-package ?vehicle-vehicle ?l2-location) 
		 :precondition ()
		 :effect ()
	 ) 


	 (:method Deliver_method0 
		 :parameters (?l2-location ?pack-package ?vehicle-vehicle ?l1-location) 
		 :task (Deliver ?location ?package) 
		 :precondition (and 
			 
		) 
		 :subtasks (and 
			task0(GetTo ?vehicle ?l1)
			task1(Load ?pack ?vehicle ?l1)
			task2(GetTo ?vehicle ?l2)
			task3(Unload ?pack ?vehicle ?l2)
		 ) 
		 :ordering (and 
			(< task0 task1) 
			(< task1 task2) 
			(< task2 task3)
		 ) 
	 ) 

	 (:method GetTo_method1 
		 :parameters (?l2-location ?vehicle-vehicle ?l1-location) 
		 :task (GetTo ?vehicle ?l2) 
		 :precondition (and 
			 
		) 
		 :subtasks (and 
			 task0(Drive ?l2 ?vehicle ?l1)
		 ) 
	 ) 

	 (:method GetTo_method2 
		 :parameters (?l3-location ?vehicle-vehicle ?l2-location) 
		 :task (GetTo ?vehicle ?l2) 
		 :precondition (and 
			 
		) 
		 :subtasks (and 
			task0(GetTo ?vehicle ?l2)
			task1(Drive ?l3 ?vehicle ?l2)
		 ) 
		 :ordering (and 
			(< task0 task1)
		 ) 
	 ) 

	 (:method GetTo_method3 
		 :parameters (?l-location ?vehicle-vehicle) 
		 :task (GetTo ?vehicle ?l2) 
		 :precondition (and 
			 
		) 
		 :subtasks (and 
			 task0(Noop ?l ?vehicle)
		 ) 
	 ) 

	 (:method Load_method0 
		 :parameters (?s2-capacity_number ?pack-package ?s1-capacity_number ?loc-location ?vehicle-vehicle) 
		 :task (Load ?pack ?vehicle ?l1) 
		 :precondition (and 
			 
		) 
		 :subtasks (and 
			 task0(PickUp ?s2 ?pack ?s1 ?loc ?vehicle)
		 ) 
	 ) 

	 (:method Unload_method0 
		 :parameters (?s2-capacity_number ?pack-package ?s1-capacity_number ?loc-location ?vehicle-vehicle) 
		 :task (Unload ?pack ?vehicle ?l2) 
		 :precondition (and 
			 
		) 
		 :subtasks (and 
			 task0(Drop ?s2 ?pack ?s1 ?loc ?vehicle)
		 ) 
	 ) 


	(:action Drive 
		 :parameters (?l2-location ?vehicle-vehicle ?l1-location) 
		 :precondition (and 
			(not (at ?vehicle ?l1)) 
			(road ?l1 ?l2))
		 :effect (and 
			(not (at ?vehicle ?l1)) 
			(at ?vehicle ?l2))
	) 

	(:action Drop 
		 :parameters (?s2-capacity_number ?pack-package ?s1-capacity_number ?loc-location ?vehicle-vehicle) 
		 :precondition (and 
			(at ?vehicle ?loc) 
			(in ?pack ?vehicle) 
			(capacity_predecessor ?s1 ?s2) 
			(capacity ?vehicle ?s1))
		 :effect (and 
			(not (in ?pack ?vehicle)) 
			(at ?pack ?loc) 
			(capacity ?vehicle ?s2) 
			(not (capacity ?vehicle ?s1)))
	) 

	(:action PickUp 
		 :parameters (?s2-capacity_number ?pack-package ?s1-capacity_number ?loc-location ?vehicle-vehicle) 
		 :precondition (and 
			(at ?vehicle ?loc) 
			(in ?pack ?vehicle) 
			(capacity_predecessor ?s1 ?s2) 
			(capacity ?vehicle ?s2))
		 :effect (and 
			(not (at ?pack ?loc)) 
			(in ?pack ?vehicle) 
			(capacity ?vehicle ?s1) 
			(not (capacity ?vehicle ?s2)))
	) 

	(:action Noop 
		 :parameters (?l-location ?vehicle-vehicle) 
		 :precondition (and 
			(at ?v ?l))
		 :effect ()
	) 

)